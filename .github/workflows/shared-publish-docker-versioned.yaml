name: Shared Publish Docker
on:
  workflow_call:
    inputs:
      cloud_provider:
        description: 'Must be one of [aws, gcp, azure, default]'
        required: false
        default: 'default'
        type: string
      release_type:
        description: The type of version number to return. Must be one of [Snapshot, Patch, Minor or Major]
        required: true
        type: string
      java_version:
        description: The version of Java to use to compile the JAR. Defaults to 11
        type: string
        default: '11'
      publish_vulnerabilities:
        description: If true, will attempt to publish any vulnerabilities to GitHub. Defaults to true. Set to false for private repos.
        type: string
        default: 'true'
      version_number_input:
        description: If set, the version number will not be incremented and the given number will be used.
        type: string
        default: ''
      force_release:
        description: If 'yes', will force the creation a release, if 'no' will not create a release. 'branch' will use release_type and the branch to determine if a release should be created.
        type: string
        default: 'branch'
    outputs:
      version_number_output:
        description: The complete version number 
        value: ${{ jobs.buildImage.outputs.jar_version }}
      image_tag:
        description: The tag used to describe the image in docker
        value: ${{ jobs.buildImage.outputs.image_tag }}
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  buildImage:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      security-events: write
      packages: write
    outputs:
      jar_version: ${{ steps.version.outputs.new_version }}
      image_tag: ${{ steps.updatePom.outputs.image_tag }}
    steps:
      - name: Check if Release
        id: checkRelease
        run: |
            FORCE_RELEASE=${{ inputs.force_release == 'yes' }}
            FORCE_NOT_RELEASE=${{ inputs.force_release == 'not' }}
            CHECK_BRANCH_FOR_RELEASE=${{ inputs.force_release == 'branch' }}
            BRANCH_ALLOWS_RELEASE=${{ (inputs.release_type == 'Major' || inputs.release_type == 'Minor' || inputs.release_type == 'Patch') && (github.event.repository.default_branch == github.ref_name) }}
            if $FORCE_RELEASE; then
              ISRELEASE=true
            elif $FORCE_NOT_RELEASE; then
              ISRELEASE=false
            elif ($CHECK_BRANCH_FOR_RELEASE) && ($BRANCH_ALLOWS_RELEASE); then
              ISRELEASE=true
            else
              ISRELEASE=false
            fi
            echo "Setting IS_RELEASE to $ISRELEASE"
            echo "IS_RELEASE=$ISRELEASE" >> $GITHUB_OUTPUT
            echo "NOT_SNAPSHOT=$BRANCH_ALLOWS_RELEASE" >> $GITHUB_OUTPUT

      - name: Show Context
        run: |
          printenv
          echo "$GITHUB_CONTEXT"
        shell: bash
        env: 
            GITHUB_CONTEXT: ${{ toJson(github) }}
            IS_RELEASE: ${{ steps.checkRelease.outputs.IS_RELEASE }}

      - name: Check branch and release type
        uses: IABTechLab/uid2-shared-actions/actions/check_branch_and_release_type@v2.1
        with:
          release_type: ${{ inputs.release_type }}

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.java_version }}

      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          # git-restore-mtime requires full git history. The default fetch-depth value (1) creates a shallow checkout.
          fetch-depth: 0

      - name: Restore timestamps
        uses: thetradedesk/git-restore-mtime-action@v1.2

      - name: Set version number
        id: version
        uses: IABTechLab/uid2-shared-actions/actions/version_number@main
        with:
          type: ${{ inputs.release_type }}
          version_number: ${{ inputs.version_number_input }}
          branch_name: ${{ github.ref }}

      - name: Update pom.xml
        id: updatePom
        run: |
          current_version=$(grep -o '<version>.*</version>' pom.xml | head -1 | sed 's/<version>\(.*\)<\/version>/\1/')
          new_version=${{ steps.version.outputs.new_version }} 
          sed -i "0,/$current_version/s/$current_version/$new_version/" pom.xml
          echo "Version number updated from $current_version to $new_version"
          echo "image_tag=${{ steps.version.outputs.new_version }}-${{ inputs.cloud_provider }}" >> $GITHUB_OUTPUT

      - name: Package JAR
        id: package
        run: |
          mvn -B package -P ${{ inputs.cloud_provider }} 
          echo "jar_version=$(mvn help:evaluate -Dexpression=project.version | grep -e '^[1-9][^\[]')" >> $GITHUB_OUTPUT
          echo "git_commit=$(git show --format="%h" --no-patch)" >> $GITHUB_OUTPUT

      - name: Commit pom.xml and version.json
        if: ${{ inputs.version_number_input == '' && steps.checkRelease.outputs.IS_RELEASE != 'true' }} 
        uses: EndBug/add-and-commit@v9
        with:
          add: 'pom.xml version.json'
          author_name: Release Workflow
          author_email: unifiedid-admin+release@thetradedesk.com
          message: 'Released ${{ inputs.release_type }} version: ${{ steps.version.outputs.new_version }}'

      - name: Commit pom.xml, version.json and set tag
        if: ${{ inputs.version_number_input == '' && steps.checkRelease.outputs.IS_RELEASE == 'true' }} 
        uses: EndBug/add-and-commit@v9
        with:
          add: 'pom.xml version.json'
          author_name: Release Workflow
          author_email: unifiedid-admin+release@thetradedesk.com
          message: 'Released ${{ inputs.release_type }} version: ${{ steps.version.outputs.new_version }}'
          tag: v${{ steps.version.outputs.new_version }}

      - name: Log in to the Docker container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.updatePom.outputs.image_tag }}
            type=raw,value=${{ steps.checkRelease.outputs.NOT_SNAPSHOT == 'true' && 'latest' || '' }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            JAR_VERSION=${{ steps.version.outputs.new_version }}
            IMAGE_VERSION=${{ steps.version.outputs.new_version }}

      - name: Generate Trivy vulnerability scan report
        uses: aquasecurity/trivy-action@0.14.0
        if: inputs.publish_vulnerabilities == 'true'
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.sarif'
          hide-progress: true

      - name: Upload Trivy scan report to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: inputs.publish_vulnerabilities == 'true'
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Test with Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.14.0
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL'
          hide-progress: true

      - name: Push to Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            JAR_VERSION=${{ steps.version.outputs.new_version }}
            IMAGE_VERSION=${{ steps.version.outputs.new_version }}

      - name: Build Changelog
        id: github_release
        if: ${{ steps.checkRelease.outputs.IS_RELEASE == 'true' }}
        uses: mikepenz/release-changelog-builder-action@v3
        with:
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}\n## Installation\n```\ndocker pull ${{ steps.meta.outputs.tags }}\n```\n\n## Image reference to deploy: \n```\n${{ steps.updatePom.outputs.image_tag }}\n```\n\n## Changelog\n#{{UNCATEGORIZED}}",
              "pr_template": " - #{{TITLE}} - ( PR: ##{{NUMBER}} )"
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: ${{ steps.checkRelease.outputs.IS_RELEASE == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.version.outputs.new_version }}
          body: ${{ steps.github_release.outputs.changelog }}
          draft: true
