name: Shared Publish Docker
on:
  workflow_call:
    inputs:
      release_type:
        description: The type of version number to return. Must be one of [Snapshot, Patch, Minor or Major]
        required: true
        type: string
      java_version:
        description: The version of Java to use to compile the JAR. Defaults to 11
        type: string
        default: '11'
      publish_vulnerabilities:
        description: If true, will attempt to publish any vulnerabilities to GitHub. Defaults to true. Set to false for private repos.
        type: string
        default: 'true'
      version_number_input:
        description: If set, the version number will not be incremented and the given number will be used.
        type: string
        default: ''
      force_release:
        description: If 'yes', will force the creation a release, if 'no' will not create a release. 'branch' will use release_type and the branch to determine if a release should be created.
        type: string
        default: 'branch'
      skip_tests:
        description: If true, will skip tests when packaging JAR. Defaults to false. Set to true for test-only repos.
        type: boolean
        default: false
      vulnerability_severity:
        description: The severity to fail the workflow if such vulnerability is detected. DO NOT override it unless a Jira ticket is raised. Must be one of ['CRITICAL', 'CRITICAL,HIGH' or 'CRITICAL,HIGH,MEDIUM'] (without space in between).
        type: string
        default: 'CRITICAL,HIGH'
      working_dir:
        description: The path to the pom.xml and Dockerfile.
        type: string
        default: '.'
      append_image_name:
        description: Additional string to append to the image name.
        type: string
        default: ''
    outputs:
      version_number_output:
        description: The complete version number 
        value: ${{ jobs.buildImage.outputs.jar_version }}
      image_tag:
        description: The tag used to describe the image in docker
        value: ${{ jobs.buildImage.outputs.image_tag }}
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  buildImage:
    name: Build Image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      security-events: write
      packages: write
      pull-requests: write
    outputs:
      jar_version: ${{ steps.version.outputs.new_version }}
      image_tag: ${{ steps.updatePom.outputs.image_tag }}
    steps:
      - name: Check branch and release type
        id: checkRelease
        uses: IABTechLab/uid2-shared-actions/actions/check_branch_and_release_type@v2
        with:
          release_type: ${{ inputs.release_type }}

      - name: Show Context
        run: |
          printenv
          echo "$GITHUB_CONTEXT"
        shell: bash
        env: 
            GITHUB_CONTEXT: ${{ toJson(github) }}
            IS_RELEASE: ${{ steps.checkRelease.outputs.is_release }}
  
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.java_version }}

      - name: Checkout full history on Main
        uses: actions/checkout@v4
        if: ${{ inputs.version_number_input == ''}}
        with:
          # git-restore-mtime requires full git history. The default fetch-depth value (1) creates a shallow checkout.
          fetch-depth: 0

      - name: Checkout full history at tag v${{ inputs.version_number_input }}
        uses: actions/checkout@v4
        if: ${{ inputs.version_number_input != ''}}
        with:
          ref: v${{ inputs.version_number_input }}
          # git-restore-mtime requires full git history. The default fetch-depth value (1) creates a shallow checkout.
          fetch-depth: 0

      - name: Restore timestamps
        uses: thetradedesk/git-restore-mtime-action@v1.3

      - name: Set version number
        id: version
        uses: IABTechLab/uid2-shared-actions/actions/version_number@v2
        with:
          type: ${{ inputs.release_type }}
          version_number: ${{ inputs.version_number_input }}
          branch_name: ${{ github.ref }}

      - name: Update pom.xml
        id: updatePom
        run: |
          pushd ${{ inputs.working_dir }}
          current_version=$(grep -o '<version>.*</version>' pom.xml | head -1 | sed 's/<version>\(.*\)<\/version>/\1/')
          new_version=${{ steps.version.outputs.new_version }} 
          sed -i "0,/$current_version/s/$current_version/$new_version/" pom.xml
          echo "Version number updated from $current_version to $new_version"
          echo "image_tag=${{ steps.version.outputs.new_version }}" >> $GITHUB_OUTPUT
          popd

      - name: Package JAR
        id: package
        run: |
          pushd ${{ inputs.working_dir }}
          if [[ "${{ inputs.skip_tests }}" == "false" ]]; then
            mvn -B package -P default
          else
            mvn -B package -P default -DskipTests
          fi
          echo "jar_version=$(mvn help:evaluate -Dexpression=project.version | grep -e '^[1-9][^\[]')" >> $GITHUB_OUTPUT
          echo "git_commit=$(git show --format="%h" --no-patch)" >> $GITHUB_OUTPUT
          popd

      - name: Commit pom.xml and version.json
        if: ${{ inputs.version_number_input == '' && steps.checkRelease.outputs.is_release != 'true' }}
        uses: IABTechLab/uid2-shared-actions/actions/commit_pr_and_merge@v2
        with:
          add: '${{inputs.working_dir}}/pom.xml version.json'
          message: 'Released ${{ inputs.release_type }} version: ${{ steps.version.outputs.new_version }}'

      - name: Commit pom.xml, version.json and set tag
        if: ${{ inputs.version_number_input == '' && steps.checkRelease.outputs.is_release == 'true' }}
        uses: IABTechLab/uid2-shared-actions/actions/commit_pr_and_merge@v2
        with:
          add: '${{inputs.working_dir}}/pom.xml version.json'
          message: 'Released ${{ inputs.release_type }} version: ${{ steps.version.outputs.new_version }}'
          tag: v${{ steps.version.outputs.new_version }}

      - name: Log in to the Docker container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ inputs.append_image_name }}
          tags: |
            type=raw,value=${{ steps.updatePom.outputs.image_tag }}
            type=raw,value=${{ steps.checkRelease.outputs.not_snapshot == 'true' && 'latest' || '' }}

      - name: Extract First Image Tag
        id: extractImageTag
        run: |
          FIRST_TAG=${DOCKER_METADATA_OUTPUT_TAGS%%$'\n'*}
          echo "firstTag=$FIRST_TAG" >> $GITHUB_OUTPUT

      - name: Build and export to Docker
        uses: docker/build-push-action@v5
        with:
          context: ${{inputs.working_dir}}
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            JAR_VERSION=${{ steps.version.outputs.new_version }}
            IMAGE_VERSION=${{ steps.version.outputs.new_version }}

      - name: Vulnerability Scan
        uses: IABTechLab/uid2-shared-actions/actions/vulnerability_scan@v2
        with:
          scan_severity: HIGH,CRITICAL
          failure_severity: ${{ inputs.vulnerability_severity }}
          publish_vulnerabilities: ${{ inputs.publish_vulnerabilities }}
          image_ref: ${{ steps.extractImageTag.outputs.firstTag }}
          scan_type: image

      - name: Push to Docker
        uses: docker/build-push-action@v5
        with:
          context: ${{inputs.working_dir}}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            JAR_VERSION=${{ steps.version.outputs.new_version }}
            IMAGE_VERSION=${{ steps.version.outputs.new_version }}

      - name: Build Changelog
        id: github_release
        if: ${{ steps.checkRelease.outputs.is_release == 'true' }}
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          toTag: v${{ steps.version.outputs.new_version }}
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}\n## Installation\n```\ndocker pull ${{ steps.meta.outputs.tags }}\n```\n\n## Image reference to deploy: \n```\n${{ steps.updatePom.outputs.image_tag }}\n```\n\n## Changelog\n#{{UNCATEGORIZED}}",
              "pr_template": " - #{{TITLE}} - ( PR: ##{{NUMBER}} )"
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete Draft Releases
        if: ${{ steps.checkRelease.outputs.is_release == 'true' }}
        uses: IABTechLab/uid2-shared-actions/actions/delete_draft_releases@v3

      - name: Create Release
        if: ${{ steps.checkRelease.outputs.is_release == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          name: v${{ steps.version.outputs.new_version }}
          body: ${{ steps.github_release.outputs.changelog }}
          draft: true
