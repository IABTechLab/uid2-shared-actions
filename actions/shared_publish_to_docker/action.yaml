name: Shared publish to Docker
description: Shared action for publish image to Docker

inputs:
  new_version:
    description: The new version number to publish for the docker repo
    default: ''
  image_tag:
    description: The image tag used to extract metadata for Docker
    default: ''
  not_snapshot:
    description: True if the release type is not a snapshot or pre-release build
    default: 'false'
  github_token:
    description: The github token to login to Docker container
    required: true
  docker_file:
    description: The Dockerfile used to build and publish Docker image
    default: ''
  publish_vulnerabilities:
    description: If true, will attempt to publish any vulnerabilities to GitHub. Defaults to true. Set to false for private repos.
    type: string
    default: true

outputs:
  tags:
    description: The docker image tags
    value: ${{ steps.meta.outputs.tags }}

runs:
  using: "composite" 

  steps:
    - name: Log in to the Docker container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ inputs.github_token }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ inputs.image_tag }}
          type=raw,value=${{ inputs.not_snapshot == 'true' && 'latest' || '' }}

    - name: Extract First Image Tag
      id: extractImageTag
      shell: bash
      run: |
        FIRST_TAG=${DOCKER_METADATA_OUTPUT_TAGS%%$'\n'*}
        echo "firstTag=$FIRST_TAG" >> $GITHUB_OUTPUT

    - name: Build and export to Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ inputs.docker_file }}
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          JAR_VERSION=${{ inputs.new_version }}
          IMAGE_VERSION=${{ inputs.new_version }}

    ### These steps should use the vulnerability_scan_filesystem action.
    ### Refactor this as a part of UID2-2681.
    - name: Generate Trivy vulnerability scan report
      uses: aquasecurity/trivy-action@0.14.0
      if: inputs.publish_vulnerabilities == 'true'
      with:
        image-ref: ${{ steps.extractImageTag.outputs.firstTag }}
        format: 'sarif'
        exit-code: '0'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'
        output: 'trivy-results.sarif'
        hide-progress: true

    - name: Upload Trivy scan report to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: inputs.publish_vulnerabilities == 'true'
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Test with Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.14.0
      with:
        image-ref: ${{ steps.extractImageTag.outputs.firstTag }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL'
        hide-progress: true

    - name: Push to Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ inputs.docker_file }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          JAR_VERSION=${{ inputs.new_version }}
          IMAGE_VERSION=${{ inputs.new_version }}
