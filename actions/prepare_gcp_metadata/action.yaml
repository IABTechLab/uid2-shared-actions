name: Prepare GCP Metadata
description: Prepares the GCP OIDC enclave metadata

inputs:
  operator_image_version:
    description: The uid2-operator image version
    default: latest
  admin_root:
    description: The root path for uid2-admin folder
    default: uid2-admin
  gcp_service_account:
    description: The GCP service account
    required: true
  gcp_workload_identity_provider_id:
    description: The GCP workload identity provider id
    required: true
  gcp_registry:
    description: The GCP docker registry
    default: us-docker.pkg.dev

outputs:
  image_hash:
    description: The operator image hash
    value: ${{ steps.image_digest.outputs.IMAGE_HASH }}
  operator_key:
    description: The operator key
    value: ${{ steps.enclave_metadata.outputs.OPERATOR_KEY }}

runs:
  using: "composite"

  steps:
    - name: Authenticate with Google Cloud
      id: gcp_auth
      uses: google-github-actions/auth@v2
      with:
        token_format: access_token
        workload_identity_provider: ${{ inputs.gcp_workload_identity_provider_id }}
        service_account: ${{ inputs.gcp_service_account }}
        access_token_lifetime: 1200s

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Log in to the GCP Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.gcp_registry }}
        username: oauth2accesstoken
        password: ${{ steps.gcp_auth.outputs.access_token }}

    - name: Get image digest
      id: image_digest
      shell: bash
      run: |
        IMAGE_NAME="us-docker.pkg.dev/uid2-prod-project/iabtechlab/uid2-operator"
        IMAGE_TAG="${{ inputs.operator_image_version }}"

        # Pull the image to make sure it's available locally
        docker pull "${IMAGE_NAME}:${IMAGE_TAG}"

        # Get the digest
        IMAGE_HASH=$(docker inspect --format='{{index .RepoDigests 0}}' "${IMAGE_NAME}:${IMAGE_TAG}" | cut -d'@' -f2)
        echo "image_hash=${IMAGE_HASH}" >> $GITHUB_OUTPUT

    - name: Prepare GCP enclave ID
      id: enclave_id
      shell: bash
      env:
        IMAGE_HASH: ${{ steps.image_digest.outputs.image_hash }}
      run: |
        bash uid2-shared-actions/scripts/gcp/prepare_gcp_enclave_id.sh

    - name: Manually upload GCP enclave ID to admin (2 mins)
      shell: bash
      run: sleep 120s

    - name: Prepare GCP enclave metadata
      id: enclave_metadata
      shell: bash
      env:
        ADMIN_ROOT: ${{ inputs.admin_root }}
        ENCLAVE_ID: ${{ steps.enclave_id.outputs.ENCLAVE_ID }}
        ENCLAVE_PROTOCOL: gcp-oidc
      run: |
        bash uid2-shared-actions/scripts/save_enclave_id_to_admin.sh
