name: Build Scan Image
description: Builds a JAR file and docker image and then scans it for vulnerabilities

inputs:
  cloud_provider:
    description: 'Must be one of [aws, gcp, azure, default]'
    required: true
  failure_severity:
    description: 'The severity to fail on. Must be [CRITICAL,HIGH,MEDIUM]'
    required: true
  github_token:
    description: 'Github access token for calling repo'
    required: true

runs:
  using: "composite" 

  steps:
    - name: Package Jar 
      id: package
      shell: bash
      run: |
        mvn -B package -P ${{ inputs.cloud_provider }} 
        echo "jar_version=$(mvn help:evaluate -Dexpression=project.version | grep -e '^[1-9][^\[]')" >> $GITHUB_OUTPUT
        echo "git_commit=$(git show --format="%h" --no-patch)" >> $GITHUB_OUTPUT

    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ inputs.github_token }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha,prefix=${{ steps.package.outputs.jar_version }}-,suffix=-${{ inputs.cloud_provider }},format=short

    - name: Build Docker Image
      uses: docker/build-push-action@v3
      with:
        context: .
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          JAR_VERSION=${{ steps.package.outputs.jar_version }}
          IMAGE_VERSION=${{ steps.package.outputs.jar_version }}-${{ steps.package.outputs.git_commit }}

    - name: Local vulnerability scanner
      uses: aquasecurity/trivy-action@0.12.0
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH,MEDIUM'
        hide-progress: true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.12.0
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        format: 'sarif'
        exit-code: '1'
        ignore-unfixed: true
        severity: ${{ inputs.failure_severity }}
        output: 'trivy-results.sarif'
        hide-progress: true

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

