name: Get Version number
description: Returns the version number to use as an output
# This action uses Nerdbank.Gitversioning to determine the version number
# Outputs a value: new_version that is the complete version number
inputs:
  type:
    description: The type of version number to return. Must be one of Snapshot, Patch, Minor or Major
    required: true
  version_number:
    description: The version number to use. Allows different actions to share a build number
    required: false
    default: ''
  branch_name:
    description: The name of the branch being built/deployed. If the branch is master or main, the branch name will not be included
    required: false
    default: ''
  short_name:
    description: Yes for a short name that does not include the git hash
    required: false
    default: ''
  working_dir:
    description: The path to the directory for which the version should be determined.
    type: string
    default: '.'
outputs:
  new_version:
    description: The complete version number 
    value: ${{ steps.version.outputs.new_version }}
runs:
  using: "composite"
  steps:
    - name: Update Major Version
      if: inputs.type == 'Major' && inputs.version_number == ''
      shell: bash
      run: |
        old_ver=$(jq '.version' ${{ inputs.working_dir }}/version.json | tr -d '"')
        new_ver=$(echo $old_ver | cut -d'.' -f 1) #get the major number
        new_ver=$(echo $(expr $new_ver + 1))      #increment
        new_ver=$(echo $new_ver.0)                #set minor version to 0
        new_ver=\"$new_ver\"
        echo $(jq ".version=$new_ver" ${{ inputs.working_dir }}/version.json) > ${{ inputs.working_dir }}/version.json

    - name: Update Minor Version
      if: inputs.type == 'Minor' && inputs.version_number == ''
      shell: bash
      run: |
        old_ver=$(jq '.version' ${{ inputs.working_dir }}/version.json | tr -d '"')
        new_ver=$(echo $old_ver | awk -F. -v OFS=. '{$NF++; print $0}') # minor
        new_ver=\"$new_ver\"
        echo $(jq ".version=$new_ver" ${{ inputs.working_dir }}/version.json) > ${{ inputs.working_dir }}/version.json

    - name: Set Version
      if:  inputs.version_number == ''
      uses: dotnet/nbgv@master
      with:
        path: ${{ inputs.working_dir }}
        setAllVars: true
    
    - run: echo "NBGV_SemVer2 $NBGV_SemVer2"
      if:  inputs.version_number == ''
      shell: bash
      
    - run: env
      if:  inputs.version_number == ''
      shell: bash

    - name: Set version number for snapshot
      id: version
      shell: bash
      run: |
        BRANCH_NAME_WITH_REF=${{ inputs.branch_name }}
        REF_PREFIX="refs/heads/"
        BRANCH_NAME=${BRANCH_NAME_WITH_REF#$REF_PREFIX}
        BRANCH_NAME_TRUNC=${BRANCH_NAME#50}
        if [[ "${{ inputs.version_number }}" != "" ]]; then
          echo "new_version=${{ inputs.version_number }}" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.type }}" == "Snapshot" ]]; then
          if [[ -f "pom.xml" ]]; then
            MVN_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
            IFS='.' read -r -a parts <<< "$MVN_VERSION"
            PATCH="${parts[2]}"
            PATCH=$(echo $PATCH | cut -d'-' -f 1)
            NEW_PATCH=$(($PATCH+1))
            echo "new_version=$NBGV_MajorMinorVersion.$NEW_PATCH-alpha-$GITHUB_RUN_NUMBER-SNAPSHOT" >> $GITHUB_OUTPUT
          else
            echo "new_version=$NBGV_SimpleVersion-SNAPSHOT" >> $GITHUB_OUTPUT
          fi
        elif [[ "$BRANCH_NAME_TRUNC" != "" && "$BRANCH_NAME_TRUNC" != "master" && "$BRANCH_NAME_TRUNC" != "main" ]]; then
          echo "new_version=$NBGV_SimpleVersion-$BRANCH_NAME_TRUNC" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.short_name }}" == "Yes" ]]; then
          echo "new_version=$NBGV_SimpleVersion" >> $GITHUB_OUTPUT
        else
          echo "new_version=$NBGV_SimpleVersion" >> $GITHUB_OUTPUT
        fi
